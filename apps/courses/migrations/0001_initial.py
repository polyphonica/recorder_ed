# Generated by Django 5.2.7 on 2025-10-25 21:39

import django.db.models.deletion
import django_ckeditor_5.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('payments', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('lesson_number', models.PositiveIntegerField(help_text='Order within the topic')),
                ('lesson_title', models.CharField(max_length=255)),
                ('content', django_ckeditor_5.fields.CKEditor5Field(help_text='Main lesson content', verbose_name='content')),
                ('video_url', models.URLField(blank=True, help_text='YouTube or Vimeo embed URL', null=True)),
                ('duration_minutes', models.PositiveIntegerField(default=0, help_text='Estimated time to complete (in minutes)')),
                ('is_preview', models.BooleanField(default=False, help_text='Allow non-enrolled users to preview this lesson')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['lesson_number'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('grade', models.CharField(choices=[('N/A', 'N/A'), ('grade_1', 'Grade 1'), ('grade_2', 'Grade 2'), ('grade_3', 'Grade 3'), ('grade_4', 'Grade 4'), ('grade_5', 'Grade 5'), ('grade_6', 'Grade 6'), ('grade_7', 'Grade 7'), ('grade_8', 'Grade 8')], default='N/A', max_length=20)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(verbose_name='description')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('image', models.ImageField(blank=True, null=True, upload_to='courses/images/')),
                ('preview_video_url', models.URLField(blank=True, help_text='YouTube or Vimeo URL for course preview')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('is_featured', models.BooleanField(default=False, help_text='Show on featured courses list')),
                ('total_topics', models.PositiveIntegerField(default=0)),
                ('total_lessons', models.PositiveIntegerField(default=0)),
                ('total_enrollments', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('instructor', models.ForeignKey(help_text='Course instructor/teacher', on_delete=django.db.models.deletion.CASCADE, related_name='taught_courses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseEnrollment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='courses.course')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='course_enrollments', to='payments.order')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_enrollments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-enrolled_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseCertificate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('certificate_number', models.CharField(max_length=50, unique=True)),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('pdf_file', models.FileField(blank=True, help_text='Pre-generated PDF certificate (optional)', null=True, upload_to='certificates/')),
                ('enrollment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='certificate', to='courses.courseenrollment')),
            ],
            options={
                'ordering': ['-issued_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('subject', models.CharField(max_length=200)),
                ('body', models.TextField()),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='courses.course')),
                ('parent_message', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='courses.coursemessage')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_course_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_course_messages', to=settings.AUTH_USER_MODEL)),
                ('lesson', models.ForeignKey(blank=True, help_text='Optional: specific lesson this message is about', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='messages', to='courses.lesson')),
            ],
            options={
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='LessonAttachment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('file', models.FileField(upload_to='courses/documents/')),
                ('file_type', models.CharField(choices=[('pdf', 'PDF'), ('doc', 'Document'), ('audio', 'Audio'), ('other', 'Other')], default='other', max_length=20)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='courses.lesson')),
            ],
            options={
                'ordering': ['order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='LessonProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_completed', models.BooleanField(default=False)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('time_spent_seconds', models.PositiveIntegerField(default=0)),
                ('last_accessed_at', models.DateTimeField(auto_now=True)),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_progress', to='courses.courseenrollment')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_progress', to='courses.lesson')),
            ],
            options={
                'verbose_name_plural': 'Lesson progress records',
                'ordering': ['lesson__topic__topic_number', 'lesson__lesson_number'],
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('pass_percentage', models.PositiveIntegerField(default=70, help_text='Minimum percentage required to pass (0-100)')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quiz', to='courses.lesson')),
            ],
            options={
                'verbose_name_plural': 'Quizzes',
            },
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('score', models.DecimalField(decimal_places=2, default=0, help_text='Score as a percentage (0-100)', max_digits=5)),
                ('passed', models.BooleanField(default=False)),
                ('answers_data', models.JSONField(blank=True, default=dict)),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to='courses.courseenrollment')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='courses.quiz')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', django_ckeditor_5.fields.CKEditor5Field(verbose_name='question')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order')),
                ('points', models.PositiveIntegerField(default=1, help_text='Points for correct answer')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='courses.quiz')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='QuizAnswer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.CharField(max_length=200)),
                ('is_correct', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='courses.quizquestion')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('topic_number', models.PositiveIntegerField(help_text='Order within the course (1, 2, 3...)')),
                ('topic_title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, help_text='Optional topic description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='courses.course')),
            ],
            options={
                'ordering': ['topic_number'],
            },
        ),
        migrations.AddField(
            model_name='lesson',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='courses.topic'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['status', 'is_featured'], name='courses_cou_status_ee4b06_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['grade', 'status'], name='courses_cou_grade_aba4a6_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['instructor', 'status'], name='courses_cou_instruc_98570d_idx'),
        ),
        migrations.AddIndex(
            model_name='courseenrollment',
            index=models.Index(fields=['student', 'is_active'], name='courses_cou_student_d0d2c1_idx'),
        ),
        migrations.AddIndex(
            model_name='courseenrollment',
            index=models.Index(fields=['course', 'is_active'], name='courses_cou_course__1852c9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='courseenrollment',
            unique_together={('course', 'student')},
        ),
        migrations.AddIndex(
            model_name='coursemessage',
            index=models.Index(fields=['recipient', 'read_at'], name='courses_cou_recipie_02acd8_idx'),
        ),
        migrations.AddIndex(
            model_name='coursemessage',
            index=models.Index(fields=['course', 'sent_at'], name='courses_cou_course__72ae8c_idx'),
        ),
        migrations.AddIndex(
            model_name='lessonprogress',
            index=models.Index(fields=['enrollment', 'is_completed'], name='courses_les_enrollm_1a9f99_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='lessonprogress',
            unique_together={('enrollment', 'lesson')},
        ),
        migrations.AddIndex(
            model_name='quizattempt',
            index=models.Index(fields=['enrollment', 'quiz'], name='courses_qui_enrollm_0ca656_idx'),
        ),
        migrations.AddIndex(
            model_name='quizattempt',
            index=models.Index(fields=['quiz', 'passed'], name='courses_qui_quiz_id_eefb36_idx'),
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(fields=['course', 'topic_number'], name='courses_top_course__51fd25_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='topic',
            unique_together={('course', 'topic_number')},
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['topic', 'lesson_number'], name='courses_les_topic_i_7966f5_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['status'], name='courses_les_status_0b084d_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['is_preview'], name='courses_les_is_prev_924950_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='lesson',
            unique_together={('topic', 'lesson_number')},
        ),
    ]
