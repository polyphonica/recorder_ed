# Generated by Django 5.2.7 on 2025-10-29 04:20

from django.db import migrations
from django.utils import timezone


def auto_accept_existing_students(apps, schema_editor):
    """
    Automatically create 'accepted' applications for all existing student-teacher
    pairs who have already had lessons together.
    """
    Lesson = apps.get_model('lessons', 'Lesson')
    TeacherStudentApplication = apps.get_model('private_teaching', 'TeacherStudentApplication')

    # Get all unique student-teacher pairs from existing lessons
    existing_lessons = Lesson.objects.filter(
        approved_status='Accepted',
        is_deleted=False
    ).select_related('student', 'teacher', 'lesson_request')

    # Track unique combinations we've already created
    created_applications = set()

    for lesson in existing_lessons:
        # Get child profile if this is a child lesson
        child_profile = None
        if hasattr(lesson.lesson_request, 'child_profile'):
            child_profile = lesson.lesson_request.child_profile

        # Create a unique key for this student-teacher-child combination
        key = (lesson.student.id, lesson.teacher.id, child_profile.id if child_profile else None)

        if key not in created_applications:
            # Create an accepted application
            TeacherStudentApplication.objects.get_or_create(
                applicant=lesson.student,
                child_profile=child_profile,
                teacher=lesson.teacher,
                defaults={
                    'status': 'accepted',
                    'status_changed_at': timezone.now(),
                    'teacher_notes': 'Auto-created from existing lessons during system migration'
                }
            )
            created_applications.add(key)


def reverse_auto_accept(apps, schema_editor):
    """
    Remove auto-created applications if migration is reversed.
    """
    TeacherStudentApplication = apps.get_model('private_teaching', 'TeacherStudentApplication')
    TeacherStudentApplication.objects.filter(
        teacher_notes='Auto-created from existing lessons during system migration'
    ).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('private_teaching', '0003_teacherstudentapplication_applicationmessage_and_more'),
        ('lessons', '__latest__'),  # Ensure Lesson model is available
        ('accounts', '__latest__'),  # Ensure ChildProfile model is available
    ]

    operations = [
        migrations.RunPython(auto_accept_existing_students, reverse_auto_accept),
    ]
